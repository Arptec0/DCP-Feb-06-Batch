DCP-Feb-06-Batch

######
Day-1
######
		Introduction to DevOps
		Why DevOps ??
		
		SDLC Process ??
		Software 
		
		SDLC -- Software Development Life Cycle
		
		Develop a software Application :
					Desktop
					Web
					Mobile 
		
		Free-lance Web Developer :::
			Create a E-Commerce website and host in web servers 
			
		SDLC 
			Requirement Analysis
			Design
			Code & Development 
			Testing 
			Implementation / Deployments
			Maintainence - Enhancements/Monitoring
			
		Process ::: 
			Create a E-Commerce website and host in web servers - 6months
			
		Water-fall Model ---			Linear Approach.
			Requirement Analysis
			Design
			Code & Development ==> 
			Testing 
			Implementation / Deployments
			Maintainence - Enhancements/Monitoring
		
		New CR : 
		
			Requirement Analysis
			Design
			Code & Development ==> 
			Testing 
			Implementation / Deployments
			Maintainence - Enhancements/Monitoring
			
		Agile Methodilogies :::
		
			Modules / Iterations ::::
			Create a E-Commerce website and host in web servers - 6months
		
		Module-1 / Iteration 1	
		
			Requirement Analysis
			Design
			Code & Development ==> 
			Testing 
			Implementation / Deployments
			Maintainence - Enhancements/Monitoring
			
		Module-2 / Iteration 2	
		
			Requirement Analysis
			Design
			Code & Development ==> 
			Testing 
			Implementation / Deployments
			Maintainence - Enhancements/Monitoring		

		Module-3 / Iteration 3	
		
			Requirement Analysis
			Design
			Code & Development ==> 
			Testing 
			Implementation / Deployments
			Maintainence - Enhancements/Monitoring
			
		
		3 Modules --> deployment 
		
		
		DevOps 
		
			Requirement Analysis
			Design
			Code & Development ==> 
			Testing 
			Implementation / Deployments
			Maintainence - Enhancements/Monitoring
			
		
		Agile vs DevOps ::::
		
		Create a E-Commerce website and host in web servers
		
		5 to 10 ???
		
		Application :::
		
			Monolith Application Architecture ===> 
			
			Micro-service based Architecture
			
			Create a E-Commerce website and host in web servers
			www.amazon.com
			
			End-user ::
				
				Sign-up							Miroservice --> independently create/work on this, test & deploy to prod.
				Sign-In
				Search for products
				Add to cart
				Place the order 
				Make Payment
				Confirm Order
				Track order
				
				New Feature ---> independently create/work on this, test & deploy to prod.
				
				
		Developer !!!
		
		
		DevOps Strategy ::: 
			Why ???

		SDLC :::
		
			Business Analyst / Application Architects --
			
			Infra-Structure Team			-- 	Provision and configure the servers
			Development Team				--	Develop the code -- Coding...
			Testing Team 					-- 	Testing QA,UAT
			Release Management Team			-- 	Ensure the product release on time
			Production Support Team 		--	support the real appln.
			Production Monitoring Team 		-- 	Monitor the production servers & Applications running production envrionment
			
			Continuous Development 		--->> 
				developer1 -- java web application --> 		create the scr code - perform build - create artifacts - unit test.
								
								signup.jsp ==> build (Compile the src code & Create artifacts(binaries)*.war/*.jar/*.dll/*.exec)
												
				
								Using Eclipse based IDE for coding
								Visual Studio Code  IDE
								Visual Studio 
								Pycharm
			
			Environments ::::
			
			Non-Production Environment								Production Environment
			
				DEV	  - develop 											PROD  
				BUILD - build
				TEST
					QA 
					UAT 
					
			Continuous Integration   
				===> Automation of build (Compile the src code & Create artifacts(binaries) & integrate for testing
				
			Continuous Delivery
				
			Continuous Testing 				
			
			Continuous Deployment
			
			Continuous Monitoring
			
			Non-Prod 																			Prod Environment
			
			Build --> Created artifacts --> publised to QA --> publised to UAT 		---> 		Release to PROD Environment
			
			
			Continuous Delivery   --> Need Manual Approval for Prod Release 
			
			Continuous Deployment --> Automated Prod Release --> zero downtime Kubernetes
			
			
		Applications :::
		
			amazon
			facebook
			netflix ......
			
		Ins/finance domain
		
			DevOps Strategy :::
			
			Release any new feature/product 
			
			dependencies.
			
			create a deployment window ::: 4 - 6hrs
			
			Continuous Delivery
			

		Continuous testing ::
		
			Non-Prod 																			Prod Environment
			
			Build --> Created artifacts --> publised to QA --> publised to UAT 		---> 		Release to PROD Environment
			
			
			
		Finance Domain
		
		Telecomm Domain ;;
		
				SP1 -- decided to release any new product/offer/service to customers -- that shd be done ASAP.
				SP2 -- decided to release any new product/offer/service to customers -- that shd be done ASAP.	

Adhoc Request ::: eod: DEV,testing,rm -- need severs 
				
			test servers.
			
		Jenkins to automate... 	terraform, ansible...
			
			
			
			
		Continuous Monitoring	
		
			Create a E-Commerce website and host in web servers --- End-users are using this portal.
					No. of users   10000 users -- 20000 
					Infra-Structure - health status.
					Security attacks 
					
					
			Infra-Structure Monitoring --->  Promethus/Grafana
			
			Application Monitoring AppDynamics
			
			
		DevOps Architects
		DevOps Engineers 
		
	
			People 
			process -->  DevOps Strategies 
			tools   --> 
			
########
Day-2
########

			Lab Environment 
			Version Control System Using GIT.

		DevOps Tools :::
		
			Open-Source Tools ---> Self-Managed Tools 
			
				jenkins 
			
			DevOps Managed Services/Tools --- 
				AWS / Az / GCP 
				
				
		AWS Cloud Platform :::   				-- 	Free Tier Account! 12 Months.
			Virtual Machines ::::					EC2 Instances - Linux 
				Install all the devops tools. 	

		AWS free - tier account
		
		github.com   -- Remote Repository
		
		dockerhub.com
		
		Visual Studio Code 			https://code.visualstudio.com/download		
		MobaXterm/putty		-- SSH Client -- used to access Remote servers from our local machine.
			https://mobaxterm.mobatek.net/download.html


Tasks::			
		1. Create Github Account.	
		2. Create AWS Free-tier.		https://aws.amazon.com/console/
		3. Visual Studio Code 			https://code.visualstudio.com/download		
		4. MobaXterm/putty		-- SSH Client -- used to access Remote servers from our local machine.
										https://mobaxterm.mobatek.net/download.html		
		
		
		
		Repository 	-- Collection of Folders and files. 
					-- Version Control.
					
					
		sync-fork
		

Version Control System Using GIT ::::

		Version Control System ::::
		
		Development Environment ::::
				Coding & Development --->
				
				Developer1  	-> 			signin.jsp 
					IDE -- Visual Studio Code / Eclipse 
					
					signin.jsp -- saved ..
					
					incremental Changes ---> 
					
					signin.jsp - saved -- build -- Unit-test
					signin.jsp - saved -- build -- Unit-test
					signin.jsp - saved -- build -- Unit-test
					signin.jsp - saved -- build -- Unit-test
					signin.jsp - saved -- build -- Unit-test
					signin.jsp - saved -- build -- Unit-test
					signin.jsp - saved -- build -- Unit-test
					
				VCS ---> 
				
					signin.jsp -- save -- v1.0
					signin.jsp -- save -- v1.1
					signin.jsp -- save -- v1.2
					signin.jsp -- save -- v1.3
					signin.jsp -- save -- v1.4
					signin.jsp -- save -- v1.5
					signin.jsp -- save -- v1.6   =>>>
					
					versions / commit_id / tags 
					
				Version Control System :::
				
					-	Is used to version control the source code 
					-	Used to Track the changes
					
					-	Used to perform Parallel Development.
						using Branch. 
				
				Repository	-- Is a collection of Files and Folders which are version controlled by GIT.
				
					
		Free-lance web Developer!!!
		
				Creating the Project
					
					E_Commerce_xyz Project Folder	  -- Local Repo.				
						index.jsp
						validation.java
					
				Centralize VCS --->  google docs - web service 
				
		10-lines		index.jsp ---> saved & commited the file to git repo -- Commit_id - v1.0
										save & 
										
			
		DevOps == 
		
			-	Install GIT & Administration https://git-scm.com/downloads
			
			-	Git work flow 
			
			-	Git Branching Strategies 
			
		
		GIT Work Flow :::	
		
		
			Local Repository 	(Local Machine)													Remote Repository (Remote Servers)
			
			New index.jsp -- save in local machine & version control in local machine	====>   Remote Repo index.jsp
																						Push TO 	

			index.jsp
				func1
				func2
				func3

		
		Installion of GIT -- in Dev Environment		https://git-scm.com/downloads	
		
				VS Code , GIT 
				
					Window -- Install GIT 			-- Git Bash (CLU) , GIT GUI 
					Linux
					Mac 		
		
		Workload :::
		
			Create a New Projects
			Change Request - Enhance Projects
			Bug fixing 
			
			
		Open GIT Bash ::
		
			d: 
			
			cd d: 
			mkdir Home_Dir
			cd Home_Dir
			mkdir Project_Repo1
			cd Project_Repo1
				git repo1
			
			
		GIT BASH :: - CLU 

		Create local repo.
		
		git init ==> Initialize Local Repository & Create a default branch(master/main)
		
		Create the files 
		
		git add 
		
		git commit 
			
			
Summary ::
		
		Tasks::			
		1. Create Github Account.	
		2. Create AWS Free-tier.		https://aws.amazon.com/console/
		3. Visual Studio Code 			https://code.visualstudio.com/download		
		4. MobaXterm/putty		-- SSH Client -- used to access Remote servers from our local machine.
										https://mobaxterm.mobatek.net/download.html		
		
		5. Installion of GIT -- in Dev Environment		https://git-scm.com/downloads			
				VS Code , GIT 
					Window -- Install GIT 			-- Git Bash (CLU) , GIT GUI 			
					
########
DAY-3
########
		
		Launch EC2 Instance ---> Amazon Linux 2 Instance
		
		Installation of GIT 
		Working on GIT 
			Workflow 
			
			
		Virtual Machines -- VMs  ==> Computing Device create in a Cloud envi.
			AWS Cloud Platform	
				Regions
					Availability zones
						EC2 Instances (VMs)
		
		
			Launch EC2 Instance ---> Amazon Linux 2 Instance
				
				Access / Login to VM ::
					Using EC2 Instance Connect 					
					SSH Clients
						MobaXterm/putty						
					Terminal
					
			Installation of GIT on AWS Instance
			
				Package Manager ===> Linux --> Fedora(rhel,centos,amazon linux2) ,Debian(ubuntu)
				
				yum				
				apt-get
				rpm
				amazon-linux-extras
				
				all these pkg managers shd be executed as a root user only.
				
				
				Install git : https://git-scm.com/downloads	
				
				$ sudo -i
				$ yum install git -y
		
			Working on GIT 
				
				Local git repo													remote git repo(github)
					working dir. 	staging area 		local_gitrepo


				All GIT Misc. Commands
				
				Git Branches
				
				Git Branching Strategies 
				
				Git Remote Repository
				
			index.jsp ==> save. 
			
				commit 	== unique commit_id 
							user details  name of user & identity(email_id)
			
			git config ===> command is used to define default properties for git repo.
			
			git config --global user.email "xxxx@gmail.com"
			git config --global user.name "Loksai"
	
			git config user.email "xxxx@gmail.com"
			git config user.name "Loksai"
			
			
			git config --list 
			
		
			GIT IGNORE ::::
			
			
				Java_Web_App_Project					git repo 
					signin.java
					email_validate.java
					payment.java
					index.jsp 
					readme.txt
					xxx.doc
					indx.war 
					
			git ignore!!!!
			
				git init 
					
			
				create .gitignore file and add the contents to be ignored
					readme.txt
					xxx.doc
					indx.war
					secrets
					credentials
					
					read.md == commited 
					
		
			
				Java_Web_App_Project					Local git repo 						===> 			remote_git_repo
					signin.java			===> read user_Cren details,auth_user
					email_validate.java
					payment.java
					index.jsp 
					readme.txt
					xxx.doc
					indx.war 
					secrets
					credentials	
					
				Automation :::
				
					shell,yaml,python,groovy scripts 		===>		gitOps
					
				
				
				git diff command

  549  mkdir DCP-Feb6-Batch
  550  cd DCP-Feb6-Batch/
  551  ls
  552  clear
  553  ls
  554  clear
  555  mkdir  repo1
  556  cd repo1/
  557  git init
  558  echo "rec1" >> f1.txt
  559  git add f1.txt
  560  git status
  561  git commit -m "CM1"
  562  git status
  563  clear
  564  echo "rec1" >> file1.txt
  565  echo "rec1" >> file2.txt
  566  echo "rec1" >> file3.txt
  567  echo "rec1" >> index.jsp
  568  echo "rec1" >> s1.java
  569  ls
  570  git status
  571  clear
  572  git status
  573  git add *.java
  574  git status
  575  git add .
  576  git status
  577  git commit -m "CM2"
  578  git log
  579  git config list
  580  git config --list
  581  clear
  582  git log
  583  git config --list
  584  clear
  585  cd ..
  586  mkdir repo2
  587  cd repo2/
  588  git init
  589  clear
  590  ls -a
  591  vi .gitignore
  592  ls
  593  ls -a
  594  git status
  595  git add .
  596  git commit -m "Initial Commit - Created GIT IGNORE File"
  597  git status
  598  ls
  599  cat .gitignore
  600  ls
  601  echo "rec1" >> file1.txt
  602  echo "rec1" >> s1.md
  603  echo "rec1" >> sample1.txt
  604  ls
  605  git add .
  606  git status
  607  git commit -m "asdfa"
  608  ls
  609  clear
  610  git log
  611  clear
  612  git log
  613  git log --oneline
  614  git log --stat
  615  git log -1
  616  clear
  617  git log --oneline
  618  git show 09df490
  619  clear
  620  ls
  621  ls
  622  git status
  623  cat file1.txt
  624  echo "rec2" >> file1.txt
  625  echo "rec3" >> file1.txt
  626  clear
  627  ls
  628  cat file1.txt
  629  git diff
  630  git add .
  631  git diff --cached
  632  git diff
  633  git diff --name-only --cached
  634  history

Summary :::
			
		Launch EC2 Instance ---> Amazon Linux 2 Instance
		Installation of GIT in aws  
		
		Working on GIT 	
					
					
########
DAY-4
########
		
		Local Repository
		
		reset
		revert
		Branches 
		
		stash		
		Remote Repository
		
		
		reset 				:: undo 
		
			-- 	soft	
				---> remove the changes from the local repo, but retains the changes in staging area and working dir. Moves the HEAD pointer to previous commit point.
				
			--	mixed (default option) 
				---> remove the changes from the local repo and staging area, but retains the changes in working dir. Moves the HEAD pointer to previous commit point.
				
			--	hard
				---> remove the changes from the local repo, staging area as well as from working dir. Moves the HEAD pointer to previous commit point.
	
	Use Case ::
	
		Daily Jenkins Jobs --> monitor my dev server ==> generate some facts in a workspace ---> Repo.() 
		git reset --hard 
		read the raw data -- process --- generate a report/dashboard/EMail
							
							
						workspace 
		git reset 
		
		git revert ===>> Is used to undo the changes ==> 
						 It create a new commit point out of it.
						 Undo a specific commit.
						 
						 Is always recommended to use in Shared Repo.
		
		git rm -f <filename1> <filename2>
		
		git rm --cached <filename>
		
		git commit ???
		
		"CR1001-Description"
		
		git commit --amend
		
		data integrity !!!!
		
	Git Branches ::::
		Used to achieve Parallel Development without impacting others.
		
	git init ===> Initialize a new local repository, create default branch - master / main, create .git/ dir
		
	master branch 							===> index.jsp --> prod 
		feature1 ===> index.jsp  ---> 
		feature2 ===> index.jsp  ---> 	
		feature3 ===> index.jsp  ---> 
		feature4 ===> index.jsp  ---> 
	
	GIT Branching Strategies :::
	
	master branch 							===> index.jsp --> prod 
		feature1 ===> index.jsp  ---> 
		feature2 ===> index.jsp  ---> 	
		feature3 ===> index.jsp  ---> 
		feature4 ===> index.jsp  ---> 
	

	master branch 	rel1.0						===> index.jsp --> prod 

		Release_Branch

			Integration_Branch						App_Stream1

				DEV_Branch1 						Team1
					feature1 ===> index.jsp  ---> 
					feature2 ===> index.jsp  ---> 	
					feature3 ===> index.jsp  ---> 
					feature4 ===> index.jsp  ---> 	
				
				DEV_Branch2							Team2	
					feature1 ===> index.jsp  ---> 
					feature2 ===> index.jsp  ---> 	
					feature3 ===> index.jsp  ---> 
					feature4 ===> index.jsp  ---> 

			Integration_Branch						App_Stream2

				DEV_Branch1 						Team1
					feature1 ===> index.jsp  ---> 
					feature2 ===> index.jsp  ---> 	
					feature3 ===> index.jsp  ---> 
					feature4 ===> index.jsp  ---> 	
				
				DEV_Branch2							Team2	
					feature1 ===> index.jsp  ---> 
					feature2 ===> index.jsp  ---> 	
					feature3 ===> index.jsp  ---> 
					feature4 ===> index.jsp  ---> 
	
	
		hotfix/bugfix Branch						====> Adhoc Branches 
	
	
	
	
	
		Create New Branch ::
		
			switch
			checkout
			branch
	
	
				master				
					Dev_Branch  s1.txt
						feature1 ===> s1.txt , w1.txt...............  ---> 
						feature2 ===> ...................index.jsp  ---> 	
						feature3 ===> index.jsp  ---> 	
	
	
	
		merge 
		
		merge without conflicts
		
		When the same file is updated by more than one user/feature ?? ===> Create Merge conflict!!!
	
		master ::: 
		
		s1.txt 
			rec1
			rec2 from tempbranch1
			
		s1.txt 
			rec1
			rec2 from tempbranch2				
	
	
		Why Merge-Conflict Occurs ???
			When the same file is updated by more than one user/feature.
		
		How to fix Merge-Conflict ???
		
			1. 	Identify the file that is causing Merge-Conflict
			2.	Manually Review the Changes
			3.	Update the file accordingly
			4.	Issue git add and commit the final changes to target branch
	
		****Prevent the Merge Conflict!!!!
		
			Do proper review before Merge!
			
		
  643  mkdir repo3
  644  clear
  645  ls
  646  cd repo3
  647  ls
  648  clear
  649  git init
  650  echo "rec1" >> file1.txt
  651  git add .
  652  git commit -m "CM1"
  653  echo "rec1" >> file2.txt
  654  git add .
  655  git commit -m "CM2"
  656  echo "rec1" >> file3.txt
  657  git add .
  658  git commit -m "CM3"
  659  echo "rec1" >> file4.txt
  660  git add .
  661  git commit -m "CM4"
  662  echo "rec1" >> file5.txt
  663  git add .
  664  git commit -m "CM5"
  665  clear
  666  git log --oneline
  667  git status
  668  ls
  669  git ls-files
  670  git reset --soft 77fc4b3
  671  git status
  672  git ls-files
  673  ls
  674  git log --oneline
  675  git commit -m "CM5.1"
  676  git status
  677  ls
  678  git ls-files
  679  git log --oneline
  680  git show 77fc4b3
  681  git show 33f3800
  682  git log --oneline
  683  git reset --mixed 77fc4b3
  684  git status
  685  ls
  686  git ls-files
  687  git log --oneline
  688  git status
  689  git add .
  690  git commit -m "CM5.2"
  691  git status
  692  l
  693  ls
  694  git ls-files
  695  git log --oneline
  696  git reset --hard 77fc4b3
  697  git log --oneline
  698  git status
  699  ls
  700  git ls-files
  701  clear
  702  ls
  703  git status
  704  git log --oneline
  705  git reset --hard 7303afb
  706  git log --oneline
  707  ls
  708  cd ..
  709  mkdir repo4
  710  cd repo4/
  711  ls
  712  git init
  713  clear
  714  echo "rec1" >> f1.txxt
  715  git add .
  716  git commit -m "cm1"
  717  echo "rec1" >> f2.txt
  718  git add .
  719  git commit -m "cm2"
  720  echo "rec1" >> f3.txt
  721  git add .
  722  git commit -m "cm3"
  723  echo "rec1" >> f4.txt
  724  git add .
  725  git commit -m "cm4"
  726  git log --oneline
  727  ls
  728  git revert 24ba393
  729  git log --oneline
  730  ls
  731  git show be8492b
  732  ls
  733  git status
  734  echo "rec1" >> fq1.txt
  735  git add .
  736  git commit -m "sdfasdfafewfadc"
  737  clear
  738  git log --oneline
  739  git commit -m "CM5"
  740  git commit --amend -m "Actual Msg"
  741  git log --oneline
  742  clear
  743  git staus
  744  git status
  745  echo "rec1" >> fr1.txt
  746  echo "rec1" >> fr1.txt
  747  echo "rec1" >> fr1.txt
  748  echo "rec1" >> fr1.txt
  749  clear
  750  git add .
  751  git status
  752  ls
  753  git rm --cached fr1.txt
  754  git status
  755  git add .
  756  clear
  757  git ls-files
  758  ls
  759  git status
  760  git rm -f fr1.txt
  761  ls
  762  git status
  763  clear
  764  ls
  765  cd ..
  766  mkdir repo5
  767  clear
  768  cd repo5
  769  git init
  770  clear
  771  ls
  772  echo "rec1" >> s1.txt
  773  git add .
  774  git commit -m "CM1 from master"
  775  clear
  776  ls
  777  git branch
  778  git switch -c feature1
  779  git branch
  780  git switch master
  781  clear
  782  git branch
  783  git branch feature2
  784  git branch
  785  git checkout -b feature3
  786  git switch master
  787  clear
  788  git branch
  789  git switch feature1
  790  git log --oneline
  791  git switch master
  792  git log --oneline
  793  ls
  794  cat  s1.txt
  795  git switch feature1
  796  ls
  797  cat s1.txt
  798  git log --oneline
  799  echo "rec1" >> w1.txt
  800  ls
  801  git log --oneline
  802  git add .
  803  git commit -m "CM1 from feature1"
  804  git log --oneline
  805  ls
  806  git switch master
  807  ls
  808  git log --oneline
  809  clear
  810  git merge feature1
  811  git log --oneline
  812  ls
  813  git branch
  814  git log --oneline
  815  git switch feature2
  816  ls
  817  ls
  818  clear
  819  git switch master
  820  ls
  821  git switch -c tempbranch1
  822  ls
  823  git switch master
  824  git switch -c tempbranch2
  825  git switch master
  826  git log --oneline
  827  clear
  828  git switch tempbranch1
  829  ls
  830  echo "rec2 from tempbranch1" >> f1.txt
  831  git add .
  832  git commit -m "CM1 from tempbranch1"
  833  ls
  834  git switch master
  835  git switch tempbranch1
  836  ls
  837  echo "rec2 from tempbranch1" >> s1.txt
  838  git add .
  839  git commit -m "CM2 from tempbranch1"
  840  git switch master
  841  git log --oneline
  842  git merge tempbranch1
  843  git status
  844  git log --oneline
  845  git switch tempbranch2
  846  ls
  847  echo "rec2 from tempbranch2" >> s1.txt
  848  cat s1.txt
  849  git add .
  850  git commit -m "CM1 from tempbranch2"
  851  git log --oneline
  852  git switch master
  853  git merge tempbranch2
  854  cat s1.txt
  855  vi s1.txt
  856  git add .
  857  git commit -m "Removed Merge Conflict from tempbranch2"
  858  git status
  859  ls
  860  cat s1.txt
  861  git log --oneline
  862  history
	
	
	NEXT ::: 
		
		rebase 					==> Local repo 		
		stash 
		
				
		fetch / pull			==> Remote repo 
